"""Custom model definition
"""

from kipoi.model import BaseModel
import numpy as np

def softmax(x):
    return np.exp(x) / np.sum(np.exp(x), axis=0)


class MyModel(BaseModel):

    def __init__(self, model_arg1=1):
        # TODO - update
        self.model_arg1 = model_arg1
        self.weights = np.random.rand(4, 3)

    def predict_on_batch(self, inputs):
        """
        """
        # TODO - implement

        {%- if cookiecutter.model_input_type == 'np.array' %}
        out = softmax(np.dot(inputs, self.weights))
        {%- elif cookiecutter.model_input_type == 'list of np.arrays' %}
        out = softmax(np.dot(inputs[0], self.weights))
	{%- elif cookiecutter.model_input_type == 'dict of np.arrays' %}
        out = softmax(np.dot(inputs['features'], self.weights))
        {%- endif %}
      

        {%- if cookiecutter.model_output_type == 'np.array' %}
        return out
        {%- elif cookiecutter.model_output_type == 'list of np.arrays' %}
        return [out]
	{%- elif cookiecutter.model_output_type == 'dict of np.arrays' %}
        return {"iris_class": out}
	{%- endif %}
